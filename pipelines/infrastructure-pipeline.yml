trigger:
  branches:
    include:
      - master
      - main

pool:
  name: 'Default'

variables:
  - group: vault-config
  - name: TF_VERSION
    value: '1.9.8'
  - name: AWS_REGION
    value: 'ap-southeast-1'

jobs:
- job: PlanInfrastructureChanges
  displayName: 'Plan Infrastructure Changes'
  steps:
    - checkout: self
      persistCredentials: true

    - task: Bash@3
      displayName: 'Install Terraform'
      inputs:
        targetType: 'inline'
        script: |
          echo "Installing Terraform $(TF_VERSION)..."
          curl -LO "https://releases.hashicorp.com/terraform/$(TF_VERSION)/terraform_$(TF_VERSION)_darwin_amd64.zip"
          unzip -o terraform_$(TF_VERSION)_darwin_amd64.zip
          chmod +x terraform
          sudo mv terraform /usr/local/bin/
          rm terraform_$(TF_VERSION)_darwin_amd64.zip
          terraform version

    - task: AzureCLI@2
      displayName: 'Get Enhanced Azure OIDC Token and Authenticate with Vault'
      inputs:
        azureSubscription: 'AzureRM-WIF-Vault'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Getting enhanced OIDC token via Azure Service Connection..."

          # Get the OIDC token using az account get-access-token with the audience for Azure DevOps
          # This provides enhanced identity context compared to basic System.AccessToken
          ENHANCED_TOKEN=$(az account get-access-token --resource-type ms-graph --query accessToken -o tsv)

          if [ -z "$ENHANCED_TOKEN" ]; then
            echo "Failed to get enhanced OIDC token, falling back to service principal token"
            # Alternative: use the federated token directly
            ENHANCED_TOKEN=$(az account get-access-token --query accessToken -o tsv)
          fi

          echo "Enhanced OIDC token captured for debugging"
          echo "$ENHANCED_TOKEN" > jwt-token.txt

          echo "=== JWT Token Analysis ==="
          # Decode JWT header and payload for analysis
          echo "Token Header:"
          echo "$ENHANCED_TOKEN" | cut -d'.' -f1 | base64 -d 2>/dev/null | jq '.' || echo "Failed to decode header"

          echo "Token Payload:"
          echo "$ENHANCED_TOKEN" | cut -d'.' -f2 | base64 -d 2>/dev/null | jq '.' || echo "Failed to decode payload"

          # Extract key claims for validation
          ISSUER=$(echo "$ENHANCED_TOKEN" | cut -d'.' -f2 | base64 -d 2>/dev/null | jq -r '.iss')
          AUDIENCE=$(echo "$ENHANCED_TOKEN" | cut -d'.' -f2 | base64 -d 2>/dev/null | jq -r '.aud')
          SUBJECT=$(echo "$ENHANCED_TOKEN" | cut -d'.' -f2 | base64 -d 2>/dev/null | jq -r '.sub // "N/A"')
          EXPIRES=$(echo "$ENHANCED_TOKEN" | cut -d'.' -f2 | base64 -d 2>/dev/null | jq -r '.exp')

          echo "Key Claims Analysis:"
          echo "  Issuer: $ISSUER"
          echo "  Audience: $AUDIENCE"
          echo "  Subject: $SUBJECT"
          echo "  Expires: $EXPIRES ($(date -r $EXPIRES 2>/dev/null || echo 'Invalid timestamp'))"

          # Check if this is an enhanced WIF token
          if [[ "$AUDIENCE" == *"vso:"* ]]; then
            echo "✅ Enhanced WIF token detected (contains Azure DevOps organization ID)"
          else
            echo "⚠️  Basic token detected (no organization ID in audience)"
          fi

          echo "=== Vault Configuration Update Test ==="
          # Test updating Vault configuration to accept new organization tokens
          echo "Attempting to update Vault JWT auth configuration..."

          # Try to update the JWT auth configuration for the new organization
          vault write auth/azure-devops/config \
            oidc_discovery_url="https://vstoken.dev.azure.com/00000000-0000-0000-0000-000000000000" \
            bound_audiences="$AUDIENCE" || echo "Failed to update Vault config - will try authentication with current config"

          echo "Authenticating with Vault using enhanced OIDC token..."

          # Authenticate with Vault using enhanced Azure OIDC token
          VAULT_TOKEN=$(vault write -field=token auth/azure-devops/login \
            role=pipeline-infra-role \
            jwt="$ENHANCED_TOKEN")

          if [ -z "$VAULT_TOKEN" ]; then
            echo "Failed to authenticate with Vault"
            exit 1
          fi

          echo "##vso[task.setvariable variable=VAULT_TOKEN;issecret=true]$VAULT_TOKEN"
          echo "Successfully authenticated with Vault using enhanced WIF token"
        addSpnToEnvironment: true
      env:
        VAULT_ADDR: $(VAULT_ADDR)
        VAULT_NAMESPACE: $(VAULT_NAMESPACE)

    - task: Bash@3
      displayName: 'Get AWS Credentials from Vault'
      env:
        VAULT_TOKEN: $(VAULT_TOKEN)
        VAULT_ADDR: $(VAULT_ADDR)
        VAULT_NAMESPACE: $(VAULT_NAMESPACE)
      inputs:
        targetType: 'inline'
        script: |
          echo "Fetching AWS credentials from Vault..."

          # Get temporary AWS credentials
          CREDS=$(vault read -format=json aws/sts/infrastructure-role ttl=1h)

          if [ -z "$CREDS" ]; then
            echo "Failed to get AWS credentials from Vault"
            exit 1
          fi

          # Extract credentials
          AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.data.access_key')
          AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.data.secret_key')
          AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.data.security_token')

          # Set as pipeline variables
          echo "##vso[task.setvariable variable=AWS_ACCESS_KEY_ID;issecret=true]$AWS_ACCESS_KEY_ID"
          echo "##vso[task.setvariable variable=AWS_SECRET_ACCESS_KEY;issecret=true]$AWS_SECRET_ACCESS_KEY"
          echo "##vso[task.setvariable variable=AWS_SESSION_TOKEN;issecret=true]$AWS_SESSION_TOKEN"

          echo "AWS credentials obtained successfully"
          echo "Credential TTL: 1 hour"

    - task: Bash@3
      displayName: 'Initialize Terraform'
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_SESSION_TOKEN: $(AWS_SESSION_TOKEN)
      inputs:
        targetType: 'inline'
        script: |
          cd terraform/aws-infrastructure
          echo "Initializing Terraform..."
          terraform init

    - task: Bash@3
      displayName: 'Terraform Plan'
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_SESSION_TOKEN: $(AWS_SESSION_TOKEN)
      inputs:
        targetType: 'inline'
        script: |
          cd terraform/aws-infrastructure
          echo "Running Terraform plan..."
          terraform plan -out=tfplan

          # Show summary
          echo "Plan complete. Review the changes above."